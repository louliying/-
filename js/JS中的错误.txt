一、 基础知识
	1. 程序可能会在以下情况停止或发生错误：
		程序试图打开一个不存在的文件
		网络连接断开
		用户输入无效字符

二、 JS中的错误对象
	Error对象

	var error = new Error();  或 可以省略new
	var error = Error();

	1. 创建错误对象， 有三个属性：
		message: 带亦错误消息的字符串
		name: 错误类型
		stack: 函数执行的堆栈跟踪

		var err1 = new Error('我发生了错误');
		err1.message;    //我发生了错误
		var err2 = new TypeError(message);
		err2.name;		// TypeError

	2. JS中的错误类型：
		Error:
		EvalError
		InternalError
		RangeError
		ReferenceError
		SyntaxError： 语法错误
			如，关键字错误等
				va x = '33';
				// SyntaxError: Unexpected identifier
		TypeError: 类型错误
			如const 多次被赋值：
				const name = "cindy"
				name = "lou"
				// TypeError: Assignment to constant variable.
			如  操作不存在的DOM元素
				// Uncaught TypeError: button is null
		URIError

		Error TypeError这二种比较常见， 大多数错误直接来自JS引擎，如InternalError, SyntaxError

三、 JS异常：
	错误对象，只有在抛出时， 才会变成异常。

	1. JS中，使用throw 关键字， 把错误抛出：
		const err1 = TypeError('我出错了');
		throw err1;

		或可写成：
		throw TypeError('我出错了');
		或
		throw new TypeError('我出错了');

	2. throw可以抛出任何东西，不只是错误对象
		throw 33;
		throw 'cindy';

	3. 抛出异常时， 发生了什么
		一旦你抛出一个，它就会在程序堆栈中冒泡，除非它在某个地方被捕获。
		
		function toUppercase(string) {
  			if (typeof string !== "string") {
   				throw TypeError("参数类型需要是 string 的");
  			}
  			return string.toUpperCase();
		}
		toUppercase(4);

		在浏览器控制台，显示如下：
		Uncaught TypeError: 参数类型需要是 string 的
    		at toUppercase (<anonymous>:3:11)
    		at <anonymous>:9:1


    	除了在浏览器的控制台中看到此堆栈跟踪外，还可以通过错误对象的stack属性进行查看。
    	如果异常未被捕获，也就是说，程序员不采取任何措施来捕获它，程序将崩溃。

四、 捕获异常：
	何时何地捕获代码中的异常取决于特定的用例。

	1. 同步中的错误，异常处理： try...catch...finally
		要捕获同步函数引发的异常，我们可以使用try/catch/finally
		如：
			function toUppercase(string) {
  				if (typeof string !== "string") {
    				throw TypeError("参数类型需要是 string 的");
  				}
  				return string.toUpperCase();
			}
			toUppercase(4);
			console.log('haha');

			try {
  				toUppercase(4);
			} catch (error) {
  				console.error('1:', error.message);
			} finally {
				console.error('2:', error.message);
			}
	2. 同步中的错误，异常处理： generator 函数,  生成器
		generator() 可以随意暂停和恢复

		generator()生成器返回的迭代器对象，还具有throw()方法。 可以通过throw()向生成器中注入一个异常来停止程序。

		function * generate() {
			yield 33;
			yield 99;
		}
		const go = generate();
		const firstStep = go.next().value;  // 33
		go.trow(Error('我出错了'));

		const secondStep = go.next().value;   // 这里就抛出异常了

		要获取错误，可在生成器中使用try...catch...finally
		function * generator () {
			try {
				yield 33;
				yield 99;
			} catch(error) {
				console.error('error:', error.message);
			}
		}

	3. 异步中的错误处理：
		JS本质上，是同步的，是一种单线程语言
		浏览器中异步操作有： 定时器相关，Promise

		a. 定时器的错误处理
			function failAfterOneSecond () {
				setTimeout(() => {
					throw Error('Wrong wrong away.');
				}, 1000);
			}
			在setTimeout是异步的， try...catch...是异步的，当setTimeout回调时， try...catch已经运行完了。
			所以不能用try...catch...
			用promise来处理错误
