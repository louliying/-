JS知识汇总：
1. undefined 和 null 有什么区别？
	a. 都属于7种基本类型：string, number, null, undefined, boolean,
						新增的二种：symbol, bigint
	b. 转换成boolean值后， 都是false: Boolean(undefined), Boolean(null),   !!undefined 	!!null


	区别：
		undefined: 申明了的变量，只是没有指定值: var a;   a没赋值
					没有显示返回值的函数:   var c = () => {}   c没返回值 
					对象中不存在的值  var obj = {a:1}  obj.b 就是undefined
		null: 不代表任何值的值 

		用==判断 undefined和null，是true
		用===判断, undefined和null，是false


2. && 运算符能做什么
	逻辑与: 采用短路来防止不必要的工作
	找到第一个false并返回false， 如果没有找到false，则返回最后一个true的表达式
	false && 1 && []	// false, 第一个就是false , 找到就返回false
	' ' && true && 1	// 1,   第一个不是false,再找，..返回最后一个true的表达式

	如：
	if (fn) {
		fn.cb();
	}
	====>
	fn && fn.cb();

3. || 运算符能做什么
	逻辑或：
	在其操作数中找到第一个真值（true）表达式并反回它；

	null || 1 || undefined 		//1 第一个null,为false,再找， 1为true， 返回1
	var n = name || 'Mark';     // name有值就返回name， name没值返回'Mark'


4. 使用 + 或一元加运算符是将字符串转换为数字的最快方法吗？
	var a = '1';
	+a   // 1

	根据MDN文档，+是将字符串转换为数字的最快方法，因为如果值已经是数字，它不会执行任何操作。

5. DOM 是什么？
	DOM: 文档对象模型，是HTML和XML文档的接口。浏览器第一次读取解析HTML文档时， 会创建一个大对象，就是DOM。它是一个树状结构。DOM用于交互和修改DOM结构或特定元素/节点。

	JS中的document对象表示DOM。

6. 什么是事件传播?
	当事件发生在DOM元素上时， 事件并不是完全发生在那个元素上的。
	冒泡阶段：事件冒泡/向上传播至父级，祖父母...直到window为止。
	捕获阶段：事件从window开始向下触发元素，直到 目标元素

	事件传播三个阶段：
	捕获阶段， 目标阶段， 冒泡阶段

	addEventListener()第三个参数useCapture， 默认值为false,在冒泡阶段发生；值为true，事件在捕获阶段发生。


7. 什么是事件冒泡？

8. 什么是事件捕获？

9. event.preventDefault() 和 event.stopPropagation()方法之间有什么区别？
	event.preventDefault: 防止元素的默认行为；
						  如在表单中，它将阻止其提交；在a中，将阻止其导航；
	event.stopPropagation: 用于阻止捕获和冒泡阶段中当前事件的进一步传播。

10. 如何知道是否在元素中使用了event.preventDefault()方法？
	可以在事件对象中使用event.defaultPrevented属性， 它返回一个boolean值

11. 为什么此代码obj.someprop.x会引发错误?

12. 什么是event.target？
	event.target是发生事件的元素/触发事件的元素

13. 什么是event.currentTarget？
	显示附加事件处理程序的元素

	div onclick=...
		button 
	单击button时： event.target 是指button
				  event.currentTarget是指div

14. == 和 === 有什么区别？
	==: 一般比较，存在隐式类型转换
	===： 严格比较，类型和值都要相等

15. 为什么在 JS 中比较两个相似的对象时返回 false？
	let a = { a: 1 };
	let b = { a: 1 };
	let c = a;

	console.log(a === b); // 打印 false，即使它们有相同的属性
	console.log(a === c); // true

	基础类型的比较：通过对值的比较
	引用类型的比较: 比较的是内存中的地址

16. !! 运算符能做什么？
	将右侧的值强制转换为 布尔值 
	转换成布尔值最简单的方法

17. 如何在一行中计算多个表达式的值？
	可以使用“，”运算符在一行中计算多个表达式。
	它从左到右计算求值，并返回右边最后一个项目或最后一个操作数的值 
	let x = 5;
	x = (x++, x = addFive(x), x *= 2, x -= 5, x += 10)
	function addFive(num) {
		return num + 5;
	}
	// x++ 6
	// x = addFive(x)  11
	// x *= 2  22
	// x -= 5  17
	// x += 10  27
	最后是
	x = 27

18. 什么是提升？
	提升是描述变量和函数移动到其作用域顶部的术语。

	执行上下文： 当前正在执行的“代码环境”， 执行上下文有二个阶段：编译， 执行
	编译： JS获取所有函数声明，并将其提升到其作用域，以便稍后可以引用它们并获取所有
	      变量申明，并给变量提供默认值undefined
	执行：增值给之前提升的变量，并执行JS。

	只有用var声明的变量，函数声明， 才会被提升。
	函数表达式，箭头函数， let, const声明的变量不会提升。


19. 什么是作用域？
	作用域是可以有效访问变量或函数的区域；
	有三种作用域： 全局作用域， 函数作用域， 块作用域（ES6）：在块{}中声明的变量

	如果变量在当前作用域中不存在，它将向外部作用域中查找并搜索，如果该变量不存在，它将再次查找直到到达全局作用域，如果找到，则可以使用它，否则引发错误，这种查找过程也称为作用域链。

20. 什么是闭包？
	闭包是一个函数，在声明时， 能够记住当前作用域、父函数作用域，及以上的作用域上的变量和参数的引用，直至通过作用域上全局作用域。基本上闭包是在声明函数时创建的作用域。


21. JavaScript中的虚值是什么？
	虚值就是 转换为boolean值时为false。
	const falsyValue = ['', 0, null, undefined, NaN, false]

22. 如何检查值是否虚值？
	可以用Boolean(), !! 强制转换成boolean类型。


23. 'use strict' 是干嘛用的？
	'use strict'是ES5特性，让函数或整个代码处于严格模式。
	可以在代码顶部， 或函数顶部使用。

	严格模式的一些限制：
	1. 变量必须先声明再使用
	2. 函数的参数不能有同名属性
	3. 不能使用with
	4. 不能对只读使用赋值
	5. 不能使用前缀 0  表示八进制
	6. 不能删除不可删除的属性
	7. 不能删除变量delete prop,只能删除属性 delete para[prop]
	8. eval不能在它的外层作用域引入变量
	9. eval和arguments不能被重新赋值
	10. arguments不会自动反映函数参数的变化 
	11. 不能使用arguments.callee
	12. 不能使用arguments.caller
	13. 禁止this指向全局
	14. 不能使用fn.caller, fn.arguments获取函数调用的堆栈
	15. 增加了保留字：protected static interface

24. JavaScript中 this 值是什么？
	this指的是当前正在执行或调用该函数的对象的值。
	this值变化取决于使用它的上下文和在哪里使用它。

	对象中的this
	apply, call可以改变this
	匿名自运行函数， setTimeout： IIFE或立即执行的函数表达式，在全局作用域内声明的函数，对象内部方法中的匿名函数和内部函数的this具有默认值，该值指向window对象。 
	箭头函数：

25. 对象的 prototype 是什么？

26. 什么是IIFE，它的用途是什么？
	立即调用的函数表达式
	是在创建或声明后，将被调用/执行的函数；
	主要作用： 避免与全局作用域内的其它变量命名冲突， 污染全局命名空间
	创建IIFE的语法是：
		1. (function(){....})()
		2. (function(){...}())
		3. (function named(paras){...})();
		4. (() => {...})
		5. (function(global){....})(window);
		6. const utility = (function(){
				return {
					...
				}
			})

		常见面试题：
		var li = document.querySelectorAll('.list-group > li');
		for (var i = 0, len = li.length; i < len; i++) {
   			(function (currentIndex) {
      			li[currentIndex].addEventListener('click', function (e) {
         			console.log(currentIndex);
      			})
   			})(i);
		}


27. Function.prototype.apply方法的用途是什么？

28. Function.prototype.call方法的用途是什么？

29. Function.prototype.apply 和 Function.prototype.call 之间有什么区别？

30. Function.prototype.bind的用途是什么？
	bind()方法创建一个新的函数， 在bind()被调用时， 这个新函数的this被指定为bind的第一个参数，其它参数将做为新函数的参数

31. 什么是函数式编程? JavaScript的哪些特性使其成为函数式语言的候选语言？

32. 什么是高阶函数？

33. 为什么函数被称为一等公民？

34. 手动实现`Array.prototype.map`方法

35. 手动实现`Array.prototype.filter`方法

35. 手动实现`Array.prototype.reduce`方法

37. arguments 的对象是什么？

38. 如何创建一个没有 prototype(原型) 的对象？

39. 为什么在调用这个函数时，代码中的`b`会变成一个全局变量?

40. ECMAScript是什么？

41. ES6或ECMAScript 2015有哪些新特性？

42. `var`,`let`和`const`的区别是什么

43. 什么是箭头函数？

44. 什么是类？

45. 什么是模板字符串？

46. 什么是对象解构？

47. 什么是 ES6 模块？

48. 什么是`Set`对象，它是如何工作的？

49. 什么是回调函数？

50. Promise 是什么？

51. 什么是 `async/await` 及其如何工作？

52. 展开运算符和Rest运算符有什么区别？

53. 什么是默认参数？

54. 什么是包装对象（wrapper object）？

55. 隐式和显式转换有什么区别？

56. 什么是NaN？以及如何检查值是否为 NaN？

57. 如何判断值是否为数组？

58. 如何在不使用`%`模运算符的情况下检查一个数字是否是偶数？

59. 如何检查对象中是否存在某个属性？

60. AJAX 是什么？

61. 如何在JavaScript中创建对象？

62. Object.seal 和 Object.freeze 方法之间有什么区别？

63. 对象中的 in 运算符和 hasOwnProperty 方法有什么区别？

64. 有哪些方法可以处理javascript中的异步代码？

65. 函数表达式和函数声明之间有什么区别？

66. 调用函数，可以使用哪些方法？

67. 什么是缓存及它有什么作用？

68. 手动实现缓存方法

69. 为什么typeof null返回 object？如何检查一个值是否为 null？

70. new 关键字有什么作用？

71. 什么时候不使用箭头函数? 说出三个或更多的例子？

72. Object.freeze() 和 const 的区别是什么？

73. 如何在 JS 中“深冻结”对象？

74. `Iterator`是什么，有什么作用？

75. `Generator` 函数是什么，有什么作用？