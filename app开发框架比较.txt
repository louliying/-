1. 市面上的框架
	flutter: 
				Google出品，  
				dart语言+flutter界面库，   
						dart强类型语言：
						flutter界面库，纯排版引擎， 特殊：简单，高性能。 布局复杂界面时， flutter代码嵌套的让人崩溃。
										flutter没有 dom里的tag和css的样式， 只有JS， 所有都是用js createElement里来， 用js style给元素赋样式。

										使用flex布局思想
						在IOS，Android上，使用2套UI库。 称为“跨平台”排版引擎。
									如IOS， button用CupertinoButton
										    Android, button用 RaisedButton

				引擎： 只有一个dart引擎，严格解析dart语法。
					   逻辑层与视图层统一，运行在一套dart虚拟机下。

				flutter在普通的界面绘制上效率虽然高，但一旦涉及原生的界面，反而会遇到更多问题。
				由于flutter是在一个类canvas环境绘制的，想把一个原生控件嵌入flutter的布局里某些元素之间去排版，还不是一件容易做到的事情，坑很多。

				flutter不支持动态载入JS， 它是编译优化。

				不支持小程序


	uni-app：	
			引擎：双引擎(webview和weex都内置，这二个都是渲染引擎)
					webview： 初始化时， 要同时启动webkit排版引擎，解析html,css
							  			 要同时启动JS引擎（像V8，像jscore）解析JS
						  	webview渲染小程序，为什么性能高，核心是预载。点击一个新页面时， webview提前创建好，不会走复杂的webkit, v8初始化流程。
							  	  		JS代码，也是预栽好的。
							所以渲染速度和原生没差别， 但就 启动慢。
							微信在启动前， 已经提前初始化了小程序运行环境 。

							类似小程序那样的ui风格，是能够良好的跨iOS和Android的体验的。

						动态性：可以选择动态载入JS代码，可以更新本地JS代码。

					weex: 原生渲染， 
						独立的JS引擎（IOS是jscore, Android是V8）
							js引擎和原生渲染层，二个运行环境，而是js和原生通信慢。
							比较影响的场景，是跟手式的js响应操作绘制帧动画。
							BindingX： 可以预定义规则，让用户界面在原生层交互时，通过预定义规则直接影响，无需传递给JS层。
								在需要短时间内来回通信的场景时，可以使用BindingX这类解决方案

						动态性：可以选择动态载入JS代码，可以更新本地JS代码。

			uni-app的开发者只需要写一套界面ui。

			uni-app，它的设计目标不是跨平台排版引擎，而是跨平台应用开发引擎。
				渲染引擎可用： webview或weex
				能力层面： htmlplus API, Native.js,插件市场等解决了原生能力JS化问题。

				开发者也可以去插件市场找人订做一个原生插件，自己仍然使用js来集成，仍然可以云端直接打包。


			国人开发， 国内生态圈很热，各种登录，支付，地图， EChart等；
			uni-app则可以一套代码，同时编译为iOS、Android、H5、微信小程序、支付宝小程序、百度小程序、头条小程序、QQ小程序。

	ionic:
		http://www.ionic.wang/
		它是个UI 框架，可以使用Vue, React, Angular等任何一种语言。
		Ionic是一个开源的移动应用程序开发框架，它可以轻松地使用web技术构建高质量的跨平台的移动应用。可以让我们快速开发移动App、移动端WEB页面、微信公众平台应用，混合app web页面。

		PWA全称Progressive Web App,即渐进式WEB应用

	cordova:


	rn: 原生渲染，
	 	独立的JS引擎（IOS是jscore, Android是V8） 
			js引擎和原生渲染层，二个运行环境， 而是js和原生通信慢。
			比较影响的场景，是跟手式的js响应操作绘制帧动画。

		在IOS，Android上，使用2套UI库。 称为“跨平台”排版引擎。

		动态性：可以选择动态载入JS代码，可以更新本地JS代码。

		不支持小程序。

	







	flutter RN, Uniapp
	三大主流渲染引擎：webview、		react native/weex、		flutter


	渲染引擎： 
		1.webview: 因为H5的发展，多了些功能，如位置服务，多媒体。  	兼容小程序
		2.rn/weex: 纯粹的排版引擎，没任何原生能力。					rn是原生JS写不同平台的， weex基于vue的
		3.flutter：纯粹的排版引擎，没任何原生能力。					dart引擎


		如果一个原生应用里，某个不涉及原生能力的界面想跨平台，那么这几个引擎都可以，并且flutter的性能最高。所以能看到一些公司尝试把App中的个别原生交互较少页面使用flutter实现。


	跨平台应用开发引擎：
		不但排版部分跨平台，开发API也要跨平台。需要提供一个完整的应用开发平台，包含所有常用的应用开发能力的跨平台。在不常用的部分，提供插件市场以及免原生介入的插件使用方式。



	学成成本：
		RN: 学习react, 精通flex布局， 与原生开发协作
		Flutter:  学习dart, 了解flutter的API， 精通flex布局， 与原生协作
		Uniapp: 学习vue， 了解小程序



	总结：
		flutter:
			相对优势：
				性能好一丢丢。比rn有优势，但比拥有bindingx的weex/uni-app，在实际开发中没有很明显的差距。
			相对劣势：
				需要原生协作，维护3套代码，无法有效降低开发成本
				嵌套地狱，代码难看难维护
				不支持热更新
				目前质量和成熟度很低，github上的issue有5k+，很容易掉坑里
				原生可视控件融合不好，比如webview、video、map
				ui库不适合国情
				学习成本高

		RN:
			相对优势：
				rn的app冷启动比uni-app快。这个问题uni-app已经内部改进完毕，下个版本发布就能解决。
				rn是纯单页的，嵌入原生App比较灵活。而uni-app是应用整体的概念，如果要内嵌入其他原生应用的话，要求原生应用内嵌uni-app应用整体进来
			相对劣势：
				需要原生协作，维护3套代码，无法有效降低开发成本
				不支持小程序，发布到h5也无法直接发
				ui库不适合国情
				rn是纯单页应用，如果一个应用的页面很多，用rn写会很崩溃，变量污染和干扰严重