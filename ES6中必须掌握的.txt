1. promise

2. generator

3. await

4. 变量的解析赋值
	解构： 按一定模式，从对象或数组中取值，对变量进行赋值。
	1. 数组解构：
		1-1.模式匹配：
			等号两边的模式相同，左边的变量就会被赋予对应的值
			let [foo, [[bar], baz]] = [1, [[2], 3]];
			foo // 1
			bar // 2
			baz // 3

			let [head, ...tail] = [1, 2, 3, 4];
			head // 1
			tail // [2, 3, 4]

			let [x, y, ...z] = ['a'];
			x // "a"
			y // undefined
			z // []
			解构不成功，变量的值就是undefined
		1-2. 不完全解构：
			等号左边的模式，只匹配一部分的等号右边的数组， 依然可解构成功。
			let [a, [b], d] = [1, [2, 3], 4];
			a // 1
			b // 2
			d // 4
		1-3. 报错：
			等号的右边不是数组（或者严格地说，不是可遍历的结构)
		1-4. 适合：
			var let const的变量赋值
		1-5. new Set也可被用于解构：
			let [x, y, z] = new Set(["a", "b", "c"]);
			x // "a"
		1-6. 默认值：
			只有变量对象，严格等于undefined时， 默认值才会生效
			var [a = 1] = [undefined]
			// a = 1 默认值生效了

			var [x = 1] = [null];
			x // null  值！== undefined

			默认值可以引用解构赋值的其他变量，但该变量必须已经声明
			let [x = 1, y = x] = [];     // x=1; y=1
			let [x = 1, y = x] = [2];    // x=2; y=2
			let [x = 1, y = x] = [1, 2]; // x=1; y=2
			let [x = y, y = 1] = [];     // ReferenceError
	2. 对象解构：
		数组的元素是按次序排列的，变量的取值由它的位置决定；
		对象的属性没有次序，变量必须与属性同名，才能取到正确的值
		2-1: 变量名与属性名相同：
			var {bar, foo, baz} = { foo: "aaa", bar: "bbb" };
			// foo = aaa,  bar = bbb, baz = undefined
		2-2： 变量名与属性名不相同：
			var { foo: baz } = { foo: 'aaa', bar: 'bbb' };
			baz // "aaa"
		2-3：对象解构内部机制：
			先找到同名属性，再赋给对应的变量。
			真正被赋值的是后者
			var { foo: baz } = { foo: "aaa", bar: "bbb" };
			// baz = 'aaa'
			// foo foo is not defined
			1. 找到同名属性  foo:'aaa'   foo是匹配模式
			2. 再赋值给对应的变量
				对应的变量baz， 赋值： baz='aaa'
				baz才是变量
		2-4：对象解构，变量的声明和赋值是一体的，注意多次申明
			let foo;
			let {foo} = {foo: 1}
			这里就多次声明了，就会被错了
			let const不能重声明，var可以。

			let foo;
			({foo} = {foo: 1});
			这样就能解构成功，不报错，因为()是个代码块，而不是赋值语句。
			foo = 1 了
	3. 字符串的解构赋值
		字符串是个类数组
		const [a, b, c, d, e] = 'hello';
		// a: h
		// b: e
		// c: l
		....


		let {length : len} = 'hello';
		len // 5
	4. 解构原则：
		解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象
		let {toString: s} = 123;
		s 为number对象上的toString()
		先把123，转为对象
	5. 函数参数的解构赋值
		function move({x = 0, y = 0} = {}) {
  			return [x, y];
		}

		move({x: 3, y: 8}); // [3, 8]
		move({x: 3}); // [3, 0]
		move({}); // [0, 0]
		move(); // [0, 0]
	6. 解构的用途：
		6-1：交换变量的值：
			[x, y] = [y, x];
		6-2: 函数返回多个值
			function example() {
  				return {
    				foo: 1,
    				bar: 2
  				};
			}
			var { foo, bar } = example();
		6-3：函数参数的定义 
			// 参数是一组有次序的值
			function f([x, y, z]) { ... }
			f([1, 2, 3]);
		6-4：提取JSON数据(这个很常用)：
			var jsonData = {
  				id: 42,
  				status: "OK",
  				data: [867, 5309]
			};
			let { id, status, data: number } = jsonData;
		6-5：函数参数的默认值：
			jQuery.ajax = function (url, {
  				async = true,
 				beforeSend = function () {},
  				...
			}) {
  				// ... do stuff
			};
		6-6: 遍历Map结构
			for (let [key, value] of map) {
  				console.log(key + " is " + value);
			}
			// 获取键名
			for (let [key] of map) {
			// 获取键值
			for (let [,value] of map) {
		6-7： 输入模块的指定方法
			加载模块时，指定输入模块的哪些方法
			const { SourceMapConsumer, SourceNode } = require("source-map");
5. 函数的rest参数
	rest参数（形式为“...变量名”），用于获取函数的多余参数
	5-1:...后面，跟的是一个数组，将多余的参数放入数组中
		function add(...values) {
			// values是一个数组，将多余的参数放入values中
	  		let sum = 0;
	  		for (var val of values) {
	    		sum += val;
	  		}
	  		return sum;
		}
		add(2, 5, 3) // 10

		const sortNumbers = (...numbers) => numbers.sort();
		var arr = sortNumbers(9,4,7,2);
		// arr = [2, 4, 7, 9]
		等同于ES5：
			fuction sortNumbers () {
				return Array.prototype.slice.call(arguments).sort();
			}
	5-2: rest参数之后不能再有其他参数（即只能是最后一个参数），否则会报错
6. 扩展运算符：
	扩展运算符（spread）是三个点（...）
	它好比rest参数的逆运算，将一个数组转为用逗号分隔的参数序列。 序列
	说明：
		a. ...后面跟的是个数组
		b. ...arr  返回的是 arr1 arr2 arr3 序列
	console.log(...[1, 2, 3])
	// 1 2 3

	console.log(1, ...[2, 3, 4], 5)
	// 1 2 3 4 5
	6-1: 主要用于函数调用：
		function push(array, ...items) {
  			array.push(...items);
  			// array.push(items[0] items[1]等)
		}
		function add(x, y) {
  			return x + y;
		}
		var numbers = [4, 38];
		add(...numbers) // 42
		// add(4, 38)
	6-2: 扩展运算符和正常函数，可混合使用
		function f(v, w, x, y, z) { }
		var args = [0, 1];
		f(-1, ...args, 2, ...[3]);
	6-3：代替数组的apply()方法
		function f(x, y, z) {
  			// ...
		}
		var args = [0, 1, 2];
		f(...args);
		// es5的话
		// f.apply(null, args)

		var arr1 = [0, 1, 2];
		var arr2 = [3, 4, 5];
		arr1.push(...arr2);   // arr1.push(3,4,5)
		// es5写法
		Array.prototype.push.apply(arr1, arr2);
	6-4: 应用：
		a. 合并数组：
			[1, 2, ...more]   // es5 [1, 2].concat(more)
			[...arr1, ...arr2, ...arr3]	// es5 arr1.concat(arr2, arr3)
		b. 与解构赋值结合
			[a, ...rest] = list   
			//es5 a = list[0]  rest = list.slice(1)
			
			const [first, ...rest] = [1, 2, 3, 4, 5];
			first // 1
			rest  // [2, 3, 4, 5]

			const [first, ...rest] = [];
			first // undefined
			rest  // []:

			将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。
			const [...butLast, last] = [1, 2, 3, 4, 5]; 报错
		c. 函数的返回值 
			JavaScript的函数只能返回一个值，如果需要返回多个值，只能返回数组或对象。
			扩展运算符可返回多个值 
			var d = new Date(...dateFields);
		d. 将字符串转为数组
			[...'hello']
			// [ "h", "e", "l", "l", "o" ]
		e. 实现了Iterator接口的对象
			任何Iterator接口的对象，都可以用扩展运算符转为真正的数组。
			var nodeList = document.querySelectorAll('div');
			var array = [...nodeList];

7. symbol
	7-1: 一种新的JS基础类型，表示独一无二的值。
		JS七种数据类型： Undefined, Null, Boolean, String, Number, Object, Symbol
		用字符串型 做为对象属性，很容易重名，但用Symbol就不会出现对象属性重名。
		var s = Symbole();
		不需要new的，它是基础类型，不是对象， 所以s没有属性， 它是一种类似于String的类型。
		
	7-2: Symbol函数的参数只是表示对当前 Symbol 值的描述
		var s1 = Symbol('foo');
		s1 // Symbole('foo')
		s1.toString() // "Symbol(foo)"

		相同参数的二个symbol变量，也是不相等的
		var s1 = Symbol();
		var s2 = Symbol();
		s1 === s2 // false
	7-3：symbol值不能与其它类型的值进行运算，会报错。
		var sym = Symbol('My symbol');
		"your symbol is " + sym   //TypeError: can't convert symbol to string
	7-4: symbol值可以转成字符串，布尔值
		symbole值不能转为数值 
		var sym = Symbol('My symbol');
		String(sym) // 'Symbol(My symbol)'
		sym.toString() // 'Symbol(My symbol)'

		var sym = Symbol();
		Boolean(sym) // true
		!sym  // false
	7-5：symbole作为属性名
		var mySymbol = Symbol();
		a. 方法一：
			var mySymbol = Symbol();
			var a = {};
			a[mySymbol] = 'Hello!';
		b. 方法二：
			var a = {
				[mySymbol] = 'Hello'
			};
		c. 方法三：
			Object.defineProperty(a, mySymbol, { value: 'Hello!' });

		a[mySymbol] // "Hello!"
		注意： 不能用"."
			// .运算符，属性名只能是string。
			a.mySymbol = 'Hello!';  
			// undefined 属性名是symbol时为undefined
			a[mySymbol] 
			// "Hello!"  属性名为string了
			a['mySymbol'] 
		d. Symbol 作为属性名，getOwnPropertySymbols
			属性不会出现在for...in、for...of循环中，
			不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。
			它不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。
			var obj = {};
			var a = Symbol('a');
			var b = Symbol('b');
			obj[a] = 'Hello';
			obj[b] = 'World';
			var objectSymbols = Object.getOwnPropertySymbols(obj);

			objectSymbols // [Symbol(a), Symbol(b)]
		e. Reflect.ownKeys
			返回所有类型的键名，包括常规键名和 Symbol 键名
			let obj = {
  				[Symbol('my_key')]: 1,
  				enum: 2,
  				nonEnum: 3
			};

			Reflect.ownKeys(obj)
			// [Symbol(my_key), 'enum', 'nonEnum']
		f. 总结
			由于以 Symbol 值作为名称的属性，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。
	7-6：Symbol.for()
		Symbol.for接受一个字符串作为参数，然后搜索有没有以该参数作为名称的Symbol值。
		如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。
		var s1 = Symbol.for('foo');
		var s2 = Symbol.for('foo');
		s1 === s2 // true

		调用Symbol.for("cat")30次，每次都会返回同一个 Symbol 值，但是调用Symbol("cat")30次，会返回30个不同的Symbol值。
		Symbol.for为Symbol值登记的名字，是全局环境的，可以在不同的 iframe 或 service worker 中取到同一个值
	7-7: Symbol.keyFor()
		方法返回一个已登记的 Symbol 类型值的key。
		var s1 = Symbol.for("foo");
		Symbol.keyFor(s1) // "foo"

		var s2 = Symbol("foo");
		Symbol.keyFor(s2) // undefined
		Symbol()写法，没有登记机制。

8. Set: 新数据类型，类似于数组，但成员唯一，没有重复。
	8-1: 用来数组去重：
		var set = new Set([1, 2, 3, 4, 4]);
		[...set]
		// [1, 2, 3, 4]

		等同于：
		var set = new Set();
		var arr = [1,2,3,4,4];
		arr.forEach((i) => set.add(i))
		console.log(...set);
	8-2：Set内部判断相等：
		不会进行类型转换， 所以5和"5"是不一要的。
		内部判断相等，使用“Same-value equality”的方法，与===相似，不同在于， 二个NaN相等
		二个对象总是不相等的
	8-3: Set实例对象的属性和方法：
		属性：
			var s = new Set();
			s.constructor	// Set
			s.size			//成员的总数，像8-1中，set.size 是4
		方法：
			add(value)：添加某个值，返回Set实例对象本身。
			delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
			has(value)：返回一个布尔值，表示该值是否为Set的成员。
			clear()：清除所有成员，没有返回值。
	8-4：遍历操作：
		keys()：返回键名的遍历器
		values()：返回键值的遍历器
		entries()：返回键值对的遍历器
		forEach()：使用回调函数遍历每个成员

		Set的遍历顺序就是插入顺序

9. Map结构
	它类似于对象，也是key-value,但key不局限于字符串，各种类型的值（包括对象）都可以当作键。
	var m = new Map();
	var o = {p: 'Hello World'};
	m.set(o, 'content'); 	//接受以对象o作为key
	m.get(o) // "content"
	m.has(o) // true
	m.delete(o) // true
	m.has(o) // false
	9-1: 以数组作为new 时参数：
		var map = new Map([
  			['name', '张三'],
  			['title', 'Author']
		]);
		等同于：
		arr.forEach((item, key) => map.add(key, item))
	9-2: 如果对同一个键多次赋值，后面的值将覆盖前面的值
	9-3: 如果读取一个未知的键，则返回undefined。
		new Map().get('asfddfsasadf')   //undefined
	9-4: Map的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键
		var map = new Map();
		map.set(['a'], 555);
		map.get(['a']) // undefined
		上面二个['a']，是二个不两只内存地址的数组。

		如果key是基本类型，则严格相等后，就是同一个key。
	9-5： Map实例对象的属性和方法：
		属性：
		size：属性返回Map结构的成员总数。
		方法：
		set(key, value)： set方法设置key所对应的键值，然后整个Map实例对象
						 如果key已存在，则用新值覆盖
		get(): 读取key对应的键值，如果找不到key，返回undefined。
		has(): 返回一个布尔值，表示某个键是否在Map数据结构中
		delete():删除某个键，返回true。如果删除失败，返回false。
		clear(): 清除所有成员，没有返回值。
	9-6: 遍历的方法：
		keys()：返回键名的遍历器。
		values()：返回键值的遍历器。
		entries()：返回所有成员的遍历器。
		forEach()：遍历Map的所有成员。

		Map的遍历顺序就是插入顺序。
	9-7：与其它类型转换：
		Map转数组：
			let myMap = new Map().set(true, 7).set({foo: 3}, ['abc']);
			[...myMap]  // [[true, 7], [foo, 3], ['abc']]

10. propx
	10-1.定义
		在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写
		var proxy = new Proxy(target, handler);
		target: 目标对象，即你要保护的对象
		handler: 定义拦截行为， 可以在进行get,set的拦截定义
	10.2：例：
		var proxy = new Proxy({}, {
	  		get: function(target, property) {
	    		return 35;
	  		}
		});
		//对所有对象，进行get拦截，取值都返回35
		proxy.time // 35
		proxy.name // 35
	10-3：要操作的是proxy实例
		要使得Proxy起作用，必须针对Proxy实例（上例是proxy对象）进行操作，而不是针对目标对象（上例是空对象）进行操作。
		var a = {
			name: 'cindy'
		}
		proxy.name //35, 这里也不会报错说proxy.name undefined
		a.name;  //这里是cindy  要操作proxy的实例，而不是target。
	10-4： 如果handle没有任何操作：
		那就等同于直接通向原对象。
		var target = {};
		var handler = {};
		var proxy = new Proxy(target, handler);
		proxy.a = 'b';
		target.a // "b" 因为proxy直接通向了target, 二者地址不一样，但值都是一样的
	10-5：如何在object上调用代理，而不是在proxy实例 上
		将Proxy对象，设置到object.proxy属性，从而可以在object对象上调用。
		var object = { proxy: new Proxy(target, handler) };
		let obj = Object.create(proxy);
		这要就可以在obj上调用了
		var proxy = new Proxy({}, {
			get: function (target, key, receiver) {
				 // return Reflect.get(target, key, receiver);
				 return 35;
			},
			set: function (target, key, value, receiver) {	   
			    return Reflect.set(target, key, value, receiver);
			}
		});
		var obj = Object.create(proxy);
		// var obj = {proxy: proxy};
		obj.title;
		obj.name = 'cindy';
		console.log(obj.name);
		console.log(obj);
	10.6: 发现一个问题：
		var proxy = new Proxy({}, {
	  		get: function(target, property) {
	    		return 35;
	  		}
		});		
		console.log(proxy.time) // 35
		proxy.time = 'hehe';
        console.log(proxy.time);  // 35
        这里， 对proxy.time进行set了， get时仍是35
        这时proxy = {time: 'hehe'}

        var proxy = new Proxy({}, {
			get: function (target, key) {				 
				 return 35;
			},
			set: function (target, key, value, receiver) {	   
			    return Reflect.set(target, key, value, receiver);
			}
		});
		var obj = Object.create(proxy);
		console.log(obj.time);  //35
		obj.time = 'haha';
		console.log(obj.time);	// haha
		这时， obj = {time: 'haha'}
		obj = {
			time: 'haha',  //到这里，就取出来了，不再往下遍历了
			__proto__: Proxy{
				get:...
			}
		}
	10-7：proxy支持的拦截操作：
		a. get(target, propKey, receiver)
			拦截对象属性的读取，比如proxy.foo和proxy['foo']
		b. set(target, propKey, value, receiver)
			拦截对象属性的设置，比如proxy.foo = v或proxy['foo'] = v，返回一个布尔值
		c. has(target, propKey)
			拦截propKey in proxy的操作，以及对象的hasOwnProperty方法，返回一个布尔值。
		d. deleteProperty(target, propKey)
			拦截delete proxy[propKey]的操作，返回一个布尔值。
		e. ownKeys(target)
			拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)，返回一个数组。该方法返回对象所有自身的属性，而Object.keys()仅返回对象可遍历的属性。
		f. getOwnPropertyDescriptor(target, propKey)
			拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。
		g. defineProperty(target, propKey, propDesc)
		defineProperty(target, propKey, propDesc)
			拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。
		h. preventExtensions(target)
			拦截Object.preventExtensions(proxy)，返回一个布尔值。
		i. getPrototypeOf(target)
			拦截Object.getPrototypeOf(proxy)，返回一个对象。
		j.isExtensible(target)
			拦截Object.isExtensible(proxy)，返回一个布尔值。
		k. setPrototypeOf(target, proto)
			拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。
			如果目标对象是函数，那么还有两种额外操作可以拦截。
		l. apply(target, object, args)
			拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。
		m. construct(target, args)
			拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args)。
	10-8: Reflect对象的方法
		Reflect.apply(target,thisArg,args)
		Reflect.construct(target,args)
		Reflect.get(target,name,receiver)
		Reflect.set(target,name,value,receiver)
		Reflect.defineProperty(target,name,desc)
		Reflect.deleteProperty(target,name)
		Reflect.has(target,name)
		Reflect.ownKeys(target)
		Reflect.isExtensible(target)
		Reflect.preventExtensions(target)
		Reflect.getOwnPropertyDescriptor(target, name)
		Reflect.getPrototypeOf(target)
		Reflect.setPrototypeOf(target, prototype)

	10-9: Proxy 实现观察者模式
			const quequedObservers = new Set();
			observe = fn => quequedObservers.add(fn);
			const observable = obj => new Proxy(obj, {set});

			function set (target, key, value, receiver) {
				const result = Reflect.set(target, key, value, receiver);
				quequedObservers.forEach(fn => fn());
				return result;
			}

11. Reflect:
	ES6为操作对象提供的API
	1-1：Reflect设计目的：
		a. 将Object对象的一明显属于语言内部的方法，放到Reflect对象上。
			Object.definedProperty  ==>
			Reflect.definedProperty
		b. 修改某些Object方法的返回结果。
			Object.definedProperty(obj, name, desc)如果无法定义属性，则抛出错
			Reflect.definedProperty(obj, name, desc)无法定义时，返回false
		c. 让Object操作， 都变成了函数行为
			'assign' in Object ==>  Reflect.has(Object, 'assign')
			delete obj[name] ==>  Reflect.deleeProperty(obj, name)
		d. Reflect对象的方法与Proxy对象的方法，一一对应
			只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。
			不管Proxy怎么修改默认行为， 总要以在Reflect上获得默认行为。
	1-2： Reflect 的静态方法：
		Reflect.apply(target, thisArg, args)
		Reflect.construct(target, args)
			等同于new target(...args)
			function Greeting(name) {
				this.name = name;
			}
			const greet = Reflect.construct(Greeting, ['cindy']);
			第一个参数，不是对象，会报错

		Reflect.get(target, name, receiver):
			查找并返回target对象的name属性值， 没有，则返回undefined
			target不是对象，会报错
		Reflect.set(target, name, value, receiver)
			设置target对象的name属性值 为value
			target不是对象，报错
		Reflect.defineProperty(target, name, desc)
		Reflect.deleteProperty(target, name)
			删除target的name属性
			等同于delete obj[name]操作
			删除成功， 或name属性不存在， 返回true
			删除失败返回false
			target不是对象，会报错
		Reflect.has(target, name)
			对应 name in obj的in运算符
			target不是对象，会报错

		Reflect.ownKeys(target)
		Reflect.isExtensible(target)
			对象是否可扩展
		Reflect.preventExtensions(target)
			让一个对象变为不可扩展
		Reflect.getOwnPropertyDescriptor(target, name)
		Reflect.getPrototypeOf(target)
			读取对象的__proto__属性， 等同于 Object.getPrototypeOf(obj)
			Object.getPrototypeOf(obj)如果参数不是对象，会将其转为对象再运行
			Reflect.getPrototypeOf(obj),如果参数不是对象，会报错

		Reflect.setPrototypeOf(target, prototype)
			用于设置目标对象的原型，
			等同于:Object.setPrototypeOf(obj, newProto)
			设置成功，返回true，失败返回false
			Object.setPrototypeOf()第一个参数不是对象，会先转成对象，再运行
			Reflect.getPrototypeOf()第一个参数不是对象，会报错

12.Iterator： 遍历器
	JS中有四种数据集合： Array, Object, Map, Set

	遍历器： 一种接口，为各种不同的数据结构，提供统一的访问机制。
			任何数据结构，只要部署了Iterator接口，就可以完在遍历。
			
	12-1： 遍历器遍历过程：
		a. 创建一个指针对象，指向当前数据结构的起始位置
		b. 第一次调用指针对象的next方法，将指针指向数据结构的第一个成员
		c. 第二次调用指针对象的next方法，指针指向数据结构的第二个成员
		d. 不断调用指针对象的next方法，直接数据的末尾。

		每次调用next()都会返回当前成员信息，包括value:当前成员的值, done:是否遍历结束

		对于遍历器来说，value:undefined,   done:false 都是会被忽略的。
		var it = makeIterator(['a', 'b']);
		it.next();  //{value:a, done: false}
		it.next();	// {value:b, done:false}
		it.next();	// {value:undefined, done:true}

		function makeIterator(arr) {
			var nextIndex = 0;
			return {
				next: function (){
					return nextIndex < arr.length?
						{value: arr[nextIndex++], done:false} :
						{value: undefined, done:true}
				}
			}
		}

		===> 迭代器可以缩写为：

		function makeIterator(arr) {
			var nextIndex = 0;
			return {
				next: function{
					// 对于 迭代器，value: undefined, 和 done: false都会被忽略
					return nextIndex < arr.length ?
						{value: arr[nextIndex++]} :
						{done: ture}
				}
			}
		}

	12-2: 默认Iterator接口
		当使用for...of循环遍历某种数据结构时，会主动去寻找Iterator接口。
		一种数据结构，只要部署了Iterator接口，就称这种数据可遍历iterable。
		ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性
		const obj = {
			[Symbol.iterator]: function (){
				return {
					next: function(){
						return {
							value: 1,
							done: true
						}
					}
				}
			}
		}

	12-3: 原生具备Iterator接口的数据结构有：
		Array, Map, Set, String, TypedArray, 函数的arguments, NodeList对象

		这些数据类型，原生部署了Symbol.iterator属性
		let arr = ['a', 'b', 'c'];
		let iter = arr[Symbol.iterator]();

		iter.next() // { value: 'a', done: false }

		为一个对象， 增加一个Iterator：
		class RangeIterator{
			constructor(start, stop) {
				this.value = start;
				this.stop = stop;
			}

			[Symbol.iterator]() {
				return this;
			}
			next() {
				var value = this.value;
				if (value < this.stop) {
					this.value++;
					return {
						done: false, 
						value: value
					};
				}
				return {
					done: true,
					value: undefined
				}
			}
		}

		function range(start, stop) {
			return new RangeIterator(start, stop);
		}

		for (var value of range(0,3)) {
			console.log(value);
		}


	12.4: 类数组对象的Iterator
		let iterable = {
			0: 'a',
			1: 'b',
			2: 'c',
			length: 3
			[Symbol.iterator]:  Array.prototype[]
		}



14. Generator的异步应用
	14-1. 异步的传统方法：
		回调函数
		Promise
	14-2. 协程：	coroutine
		多个线程互相协助，完成异步任务
		a. 第一步，协程A开始执行、
		b. 第二步，协程A执行到一半，进入暂停，执行权转移给协程B。执行B的内容 
		c. 第三步， 一段时间后，协程B交还执行权给A。
		d. 第四步，协程A恢复执行，继续没有执行完的代码
	14-3： next()方法的参数传入
		function* gen(x) {
			// 运行到这句， yield x+2后，  x+2 的值，是给obj 的value属性的
			// 返回了{value:3, done:false},协程A交出了执行权
			// y = undefined， 是没有赋值的
			var y = yield x + 2;
			return y;
		}
		var g = gen();
		g.next();  // {value:3, done: false}
		// g.next();  // {value: undefined, done: true}   
		g.next(2);  // {value:2, done:true}
		// g.next(2) // 这个参数可以传入 Generator 函数，作为上个阶段异步任务的返回结果, 赋值给了y
					 // return 后面的表达式， 作为返回对象的value值了
	14-4： 错误处理
		function* gen(x) {
			try {
				var y = yield x + 2;
			} catch(e) {
				console.log('some errors happend:', e);
			}
		}

		var g = gen(1);
		g.next();		// {value:3, done: false}
		g.throw('错了');   // console.log('some errors happend: 错了');
		throw()方法，被gen()函数体内的try..catch...捕获

	14-5：Generatr 的真实异步函数
		function* getData () {
			var sUrl = '//...homePage.htm';
			var res = yield fetch(sUrl);
			console.log(res);
		} 
		
		var g = getData();
		var res = g.next();
		res.value.then((data) => {
			return data.json();
		}).then(data => {
			// 让getData函数内的 var res = data了
			g.next(data);
		})

		generaotr 函数， 得自己手动加next()运行， 即代码执行流程不人性化

	14-6： thunk函数和 generator函数
		自动执行 Generator 函数
		function run(fn) {
			var gen = fn()
			function next(err, data) {
				var res = gen.next(data);
				if (res.done) {
					return;
				}
				res.value(next);
			}

			next();
		}

		function* g();
		run(g);





		function* gen(x) {	
			var y = yield x + 2;
			return y;
		}
		function run(fn) {
			var args = Array.prototype.splice.call(arguments,1);
			console.log(args);
			var gen = fn(args[0]);
			// var args = arguments.splice(1);
			
			function next(err, data) {
				var res = gen.next(data);
				console.log(res);
				if (res.done) {
					return;
				}
				console.log(gen.next(res.value));
			}

			next();
		}
		run(gen, 2);


15. async 函数
	async函数，就是generator函数的语法糖
	const gen = function* () {
  		const f1 = yield readFile('/etc/fstab');
  		const f2 = yield readFile('/etc/shells');
  		console.log(f1.toString());
  		console.log(f2.toString());	
	};

	可以用async改为：
	const asyncGen = async function () {
		const f1 = await readfile('...txt');
		const f2 = await readfile('.....js');
		console.log(f1.toString());
		console.log(f2.toString());
	}
	15-1： async与 generator的区别：
		a. 内置了执行器：
			直接运行asyncGen()就可以了 不需要next()
		b. 更好的语义：
			async表示函数里有异步操作，
			await表示紧跟在后面的表达式需要等待结果。
		c. yield, await后面语句的不同：
			yield只能是thunk或promise对象
			await: 可以是promise对象
					可以是原始类型的值，但会自动转成立即 resolved 的 Promise 对象
		d. async返回值是promise对象
	15-2： 一个async例子：
		指定时间后操作什么：
		function timeout (ms) {
			// 立即 返回一个promise实例
			return new Promise((resolve, reject) => {
				// ms 毫秒后， 执行resolve
				setTimeout(resolve, ms);
			})
		}

		async function asyncConsole (msg, ms) {
			// 等timeout()函数，结束
			// timeout函数，其实就是等ms 毫秒后， 支持resolve， 结束promise的pending
			await timeout(ms);
			// 上面那句执行结束 了，才能运行console
			console.log('我等了' + ms + 'ms,才能显示：' + msg );
			// async函数内的return ，将做then回调函数的参数
			return 'cindy';
		}
		asyncConsole('Who am I?', 3000).then(res => console.log(res));

	15-3: async函数的定义 
		a. 函数申明：
			async function fn() {....}
		b. 函数申明：
			const fn = async funciton(){...}
		c. 对象方法：
			let obj = {
				async fn () {
					...
				}
			}
		d. Class的方法
			class Demo {
				constructor () {
					...
				}
				async fn () {
					....
				}
			}
			var d = new Demo();
			d.fn().then()
		e.箭头函数
			const fn = async () => {...}

	15-4: 语法 ：
		1. async 函数返回的是Promise实例对象
			async函数内部的return语句，将做为then 回调方法的参数
			async function f() {
			  	return 'hello world';
			}

			f().then(v => console.log(v)); 	// hello world

		2. async函数里，所有的await 后面的promise都执行了， promise才会发生状态变化， 才能执行then()。
			除非遇到return语句或者抛出错误。
			也就是说， 除非有return或抛错， 不然， 所有await都执行完， 才会执行then
			async function getTitle(url) {
  				let response = await fetch(url);
  				let html = await response.text();
  				return html.match(/<title>([\s\S]+)<\/title>/i)[1];
			}
			getTitle('https://tc39.github.io/ecma262/').then(console.log);
			只有fetch, html=,   return 三句话都执行了， 才会执行then。

		3. await 后面可以是promise或不是promise
			如果是个promise：
				await 它会“阻塞”后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值作为 await 表达式的运算结果。
			不是promise:
				await后面表达式的值，就是await的值， 传递给async的then()
				如：
					async function f() {
						/ 等同于
					  	// return 123;
					  	return await 123;
					}
					// v = 123
					f().then(v => console.log(v));


		4. 为什么它是promise的语法糖：
			async函数， 返回的是一个Promise对象。
			如果async函数内，只有return 3， 这种返回直接量的， 则把3写入promise的 ressole(3)， 返回这个promise对象。

			每次我们使用 await, 解释器都创建一个 promise 对象，然后把剩下的 async 函数中的操作放到 then 回调函数中。

			参考URL:https://blog.csdn.net/roamingcode/article/details/85052590

		5. 出错时
			1）.async函数内部抛出错误，会导致返回的 Promise 对象变为reject状态。
			抛出的错误对象会被catch方法回调函数接收到。
			async function f() {
  				throw new Error('出错了');
			}

			f().then(
  				v => console.log(v),
  				e => console.log(e)
			)
			// Error: 出错了


			2).任何一个await语句后面的 Promise 对象变为reject状态，那么整个async函数都会中断执行
			async function f() {
  				await Promise.reject('出错了');
  				await Promise.resolve('hello world'); // 不会执行
			}
			解决方法：
				1. 将第一个await 放到try..catch里
					async function f() {
						try {
							await Promise.reject('出错了');
						} catch() {

						}		  				
		  				return await Promise.resolve('hello world'); // 会执行
					}
				2. 在第一个await加个catch
					async function f() {
		  				await Promise.reject('出错了').catch(e) {
		  					....
		  				}
		  				return await Promise.resolve('hello world'); // 会执行
					}

			3).await后面语句出错时， 等同于async函数返回的 Promise 对象被reject
				async function f() {
  					await new Promise(function (resolve, reject) {
    					throw new Error('出错了');
  					});
				}

				f()
					.then(v => console.log(v))
					.catch(e => console.log(e))  //进的是这里

				可以将await放入try...catch中


	15-5: async await使用注意点：
		1). await命令后面的Promise对象，运行结果可能是rejected，所以最好把await命令放在try...catch代码块中
		2). 多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。
			let foo = await getFoo();
			let bar = await getBar();

			改为：
			let [foo, bar] = await Promise.all([getFoo(), getBar()]);
			或：
			let fooPromise = getFoo();
			let barPromise = getBar();
			let foo = await fooPromise;
			let bar = await barPromise;
			以上二种， getFoo, getBar异步都是同时触发的，缩短JS执行时间
		3). async 函数可以保留运行堆栈。
			const a = () => {
  				b().then(() => c());
			};
			函数a内部运行了一个异步任务b()。当b()运行的时候，函数a()不会中断，而是继续执行。等到b()运行结束，可能a()早就运行结束了，b()所在的上下文环境已经消失了。如果b()或c()报错，错误堆栈将不包括a()。



			const a = async () => {
  				await b();
  				c();
			};
			b()运行的时候，a()是暂停执行，上下文环境都保存着。一旦b()或c()报错，错误堆栈将包括a()。
			

16. class
	16-1. 基础知识点：
		类的prototype.constructor  指向类本身
		类内定义的所有方法，都是挂载在类的prototype上的。
		class P{
			constructor () {...}
			fn1 (){...}
			fn2 () {....}
		}
		====>
		P.prototype = {
			constructor () {},
			fn1 () {},
			fn2 () {}
		}

		类的内部所有定义的方法，都是不可枚举的（non-enumerable)
		Object.keys(P.prototype)		// []
		Object.getOwnPropertyNames(P.prototype)		// ["constructor","fn1", "fn2"]

	16-2: constructor()
		new 实例化时， 会被自动调用。
		如果没有定义，会默认生成一个空的constructor方法

		constructor方法内部，默认返回实例对象，即 this 

	16-3: 实例属性， 原型属性
		直接挂在实例上的属性，即定义this上的， 为实例属性
			Class P {
				construtor (x, y) {
					this.x = x;
					this.y = y;
				}
			}
		挂在原型上的属性， 即定义在class上的，为原型属性。
			Class P {
				getName () {
					...
				}
			}
			getName 就是定义在class上， 即定义在P.prototype上的


	16-4： __proto__
		它不是JS本身的属性。
		是各大浏览器厂商添加的私有属性， 很多JS引擎中，都提供了这个属性的访问，但不推荐属性。

		它是在实例对象上的
		var p1 = new P(6,8);
		var p2 = new P(6,8);
		p1.__proto__ 和 p2.__proto___是相等的， 都指向P.prototype

		Object.getPrototypeOf(p1);   /// P.prototype

	16-5： 取值函数，存值函数
		set,get对类内的属性设置值和取值
		class ClassName {
			...
			get propName () {
				return this.prop;
			}
			set propName (val) {
				this.propp += val;
			}
		}
		var p = new ClassName();
		p.prop = 'cindy';
		...

		存值函数和取值函数是设置在属性的 Descriptor 对象上的。
	16-6: 类的属性名， 可以表达式：
		let methodName = 'getArea';

		class Square {
  			constructor(length) {
    			// ...
  			}
  			// 方法名为getArea
  			[methodName]() {
    			// ...
  			}
		}
	16-7: class表达式
		const MyClass = class Me {
  			getClassName() {
    			return Me.name;
  			}
		};
		Me只在类内部可用
		MyClass 对外部可用

		const MyClass = class { /* ... */ };

		let person = new class {
  			constructor(name) {
    			this.name = name;
  			}
  			...
  		}
  	16-8：注意点：
  		1. 严格模式：类和模块内部 ，默认就是严格模式
  					考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。
  		2. 类不存在变量提升
  			new P();		//这里会报错
  			class P {
  				....
  			}

  			这种规定的原因与下文要提到的继承有关，必须保证子类在父类之后定义。
  		3. class的name
  			ES6的类，其实是封装了ES5的构造函数， 所以函数的很多特性继承了。
  			Class P {
  				...
  			}
  			P.name   // P
  		4. this指向
  			类的方法内部如果含有this，它默认指向类的实例

  			改变this
  			a. 在构造函数内指定this
  				class Logger {
  					constructor() {
    					this.printName = this.printName.bind(this);
  					}
  					...
  				}
  			b. 箭头函数
  				class Obj {
  					constructor() {
    					this.getThis = () => this;
  					}
				}
				箭头函数内部的this总是指向定义时所在的对象
			c. 解决方法是使用Proxy，获取方法的时候，自动绑定this
				function selfish (target) {
  					const cache = new WeakMap();
  					const handler = {
    					get (target, key) {
      						const value = Reflect.get(target, key);
      						if (typeof value !== 'function') {
        						return value;
      						}
      						if (!cache.has(value)) {
        						cache.set(value, value.bind(target));
      						}
      						return cache.get(value);
    					}
  					};
  					const proxy = new Proxy(target, handler);
  					return proxy;
				}

				const logger = selfish(new Logger());


	16-7: 静态方法：
		在类里， 用static表示的方法
		a. 静态方法，是挂载在类本身的，而非类的原型链上。 所以不会被类实例继承。
			class Foo {
	  			static classMethod() {
	    			return 'hello';
	  			}
			}
			Foo.classMethod();

		b. 如果静态方法包含this关键字，这个this指的是类，而不是实例。
			class Foo {
	  			static bar() {
	    			this.baz();
	  			}
	  			static baz() {
	    			console.log('hello');
	  			}
	  			baz() {
	    			console.log('world');
	  			}
			}
			Foo.bar() // hello

		c. 父类的静态方法，可以被子类继承。挂载在子类上，而非子类原型链上
			class Foo {
  				static classMethod() {
    				return 'hello';
  				}
			}
			class Bar extends Foo {
			}
			Bar.classMethod() // 'hello'
		d. 静态方法， 可以用super.staticMethod来调用。
			只在能静态方法里调用 哦
			class Bar extends Foo {
  				static classMethod() {
    				return super.classMethod() + ', too';
  				}
			}

	16-8： 类属性的新写法
		类的属性，可以不定义 在构造函数中。直接定义在类的内部的顶层，不需要加this。
		class foo {
  			bar = 'hello';
  			baz = 'world';

  			constructor() {
    			// ...
  			}
		}

	16-9：静态属性：
		类上的属性。
		class Foo {
			...
		} 
		Foo.name = 'aa';
		目前 只有这样定义， 不能定义在类内部

	16-10： 私有方法，私有属性：
		私有方法和私有属性，是只能在类的内部访问的方法和属性，外部不能访问。
		ES6 不提供，只能通过变通方法模拟实现。

17. class继承
	17-1. 基本用法：
		extends , super
		class A1 extends A{
			constructor (a,a1) {
				super(a);
				this.a1 = a1;
			}
		}
		extneds: A1 继承A
		a. 子类必须在constructor方法中调用super方法, 如果子类没有显示定义contructor()，会默认生成。
			因为，子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样实例属性和方法，然后才会其进行加工。再加上自己的属性和方法。
		b. 子类构造函数中， 必须先调用super()后， 才能用this来给自己定义属性，不然 会报错。
		c. 父类的静态方法，也会被子类继承

		ES5的继承， create()。 实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。
		ES5的继承，实质是先将父类实例对象的属性和方法，加到this上面（所以需先调用super），再用子类的构造函数修改this。

	17-2. super 关键字
		既可以是函数，也可以是属性。
		函数： 代码父类的构造函数，
			   只能用在子类的构造函数中，不然会报错。
		class A1 extends A {
			constructor () {
				super();
				// super内部的this指向了A1
				// 这里等于A.prototype.constructor.call(this);
			}
		}

		对象： 在普通方法中，指向父类的原型对象
			   在静态方法中，指向父类

		1). 普通函数：
			class A {
			 	constructor() {
			 		this.a =2;
			 	}
			 	p () {
			 		return 2;
			 	}
			}
			class B extends A {
			 	constructor () {
			 		super();
			 		super.p();	// 2
			 		// p是A原型上的方法
			 		// A.prototype.p()
			 		super.a;	// 是调用 不到a的 
			 	}
			}

			a. super指向父类的原型，所以不能调用父类实例上的方法和属性， 即A构造函数内的属性
			b. ES6 规定， 子类普通方法中通过super属性，调用父类方法时，方法内部的this指向子类实例。
			 	class A {
  					constructor() {
    					this.x = 1;
  					}
  					print() {
    					console.log(this.x);
  					}
				}

				class B extends A {
  					constructor() {
    					super();
    					this.x = 2;   // 重置了x
  					}
  					m() {
    					super.print();
    					// 相当于 A.prototype.print.call(this)
  					}
				}

				let b = new B();
				b.m() // 是2,而一是1
			c. 由于this指向子类实例，所以如果通过super对某个属性赋值，这时super就是this，赋值的属性会变成子类实例的属性。
				class B extends A {
  					constructor() {
    					super();
    					this.x = 2;
    					super.x = 3;  // 等同于this.x = 3
    					console.log(super.x);
    					// undefined
    					// 等同于A.prototype.x
    					console.log(this.x); // 3
  					}
				}
		2). 静态方法
			在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。
			class A {
  				constructor() {
    				this.x = 1;
  				}
  				static print() {
    				console.log(this.x);
  				}
			}

			class B extends A {
  				constructor() {
    				super();
    				this.x = 2;
  				}
  				static m() {
    				super.print();
    				// 等同于
    				// A.print.call(B)
    				// 这个方法的this指向B，而不是B的实例
  				}
			}

			B.x = 3;
			B.m() // 3

			
		使用super的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。

		由于对象总是继承其他对象的，所以可以在任意一个对象中，使用super关键字。

18. module
	18-1: commomJS, AMD, CMD
		commomJS: 用于服务器
			// CommonJS模块
			let { stat, exists, readfile } = require('fs');
			====>
			// 等同于
			let _fs = require('fs');
			let stat = _fs.stat;
			let exists = _fs.exists;
			let readfile = _fs.readfile;

			_fs是一个对象，把所有方法都取出来了。

			这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。

		AMD：用于浏览器

		commomJS, CMD运行时， 才确定模块的依赖关系，输入和输出。

		ES6模块： import export
				通过export命令显式指定输出的代码，再通过import命令输入。
				import { stat, exists, readFile } from 'fs';

				上面代码，只加载stat, exists readFile三个方法，其它方法不加载。称为“编译时加载”，“静态加载”
	18-2: ES6下，默认为严格模式
		严格模式下，限制如下：
			变量必须声明后再使用
			函数的参数不能有同名属性，否则报错
			不能使用with语句
			不能对只读属性赋值，否则报错
			不能使用前缀 0 表示八进制数，否则报错
			不能删除不可删除的属性，否则报错
			不能删除变量delete prop，会报错，只能删除属性delete global[prop]
			eval不会在它的外层作用域引入变量
			eval和arguments不能被重新赋值
			arguments不会自动反映函数参数的变化
			不能使用arguments.callee
			不能使用arguments.caller
			禁止this指向全局对象
			不能使用fn.caller和fn.arguments获取函数调用的堆栈
			增加了保留字（比如protected、static和interface）

			顶层的this指向undefined
	18-3: export import
		export: 规定模块对外的接口
		import: 输入其它模块的功能

		一个模块就是一个独立的文件，文件内部的变量，外界无法访问。
		如果要让文件内的变量被访问， 用export输出该变量。
		一个模块，可以export多个变量：
			export let name.....
			export let age.....

			===>
			let name...
			let age...
			export {name, age};
			// import时名字为name

			也可以用as来把输出的变量名，改一改。 
			export {
				name as nameNew,
				age as ageNew,
				age as ageNew2
			}
			// import时，名字就改为nameNew了


			export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。
			export 1; // 报错

			var m = 1;
			export m; //报错

			function fn() {...}
			export fn; //报错


			//正确1
			export var m = 1;			export function fn() {}
			// 正确2
			var m = 1; 			var fn() =  {}
			export {m}			export {fn}
			// 正确3
			var m = 1;
			export {m as mNew};

