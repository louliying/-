1. 基础概念：
	将同一个组件渲染为服务器端的HTML字符串，将它们发送到浏览器端， 同时将这些静态标记“激活”。

	服务器端渲染的Vue.js应用程序，称为“同构” “通用”。 这类应用程序的大部分代码，都可以在服务器和客户端，运行。

2. 服务器端渲染：
	使用SSR（服务器端渲染）， 与传统的SPA（单页面应用程序， Single-page-allication）相比，有以下优点：
	1. SEO友好
	2. 更快的内容到达时间（time-to-content）：无需等待所有的JS都完成下载并执行。
	缺点：
	1. 有些扩展库，需要特殊处理，才能在服务器端运行。 浏览器端的应用，只能在某些生命周期钩子中使用， 不需要特殊处理。
	2. 需要额外的服务器部署： node.js  server 运行环境 
							SPA只需要部署在静态文件服务器上
3. 预渲染 Prerendering
	如果对SEO友好的页面，只是一些about, concat等宣传页面，可用预渲染
	无需使用web服务器实时动态编译html，在构建时（build），生成特定路由的静态html文件。
	可使用prerender-spa-plugin 

4. 基本用法：
	1. 安装： npm install vue-server-renderer --save-dev
			 vue-server-renderer 和 vue的版本必须匹配， 不然运行会报错
			 vue-server-renderer 依赖一些node.js原生模块

5. 编写通用代码：
	即客户端服务器端都可运行的代码。

	1. 组件生命周期钩子函数：
		因为没有动态更新， 所以，只有beforeCreate 和 created 二个钩子会在服务器端渲染中被调用。
		其他钩子函数只会在客户端执行。

		在服务器端中， 在beforeCreated, created中， 要避免产生全局副作用的代码，如setInterval。
		在客户端，计时器可以在detroyed, beforeDestroy中，将其销毁， 但SSR中，并不会调用这些钩子，计时器就不会被销毁了。
		所以将这些副作用代码，放到beforeMount, mounted这类，客户端运行的钩子里。

	2. 访问特定平台API
		服务器端不能访问window, document这类仅浏览器可用的变量，在服务器端会抛错。

		对于仅浏览器可用的API，在纯客户端的生命周期钩子函数中，惰性访问它们。
		如果是第三方library，将其集成到服务器端渲染的应用程序中， 可能会很棘手。

	3. 自定义指令：
		大多数指令都是直接操作DOM， 会在服务器端渲染过程中导致错误。可以如下解决:
			a. 推荐使用组件作为抽象机制，并运行在「虚拟 DOM 层级(Virtual-DOM level)」（例如，使用渲染函数(render function)）。
			b. 如果你有一个自定义指令，但是不是很容易替换为组件，则可以在创建服务器 renderer 时，使用 directives 选项所提供"服务器端版本(server-side version)"。

6. 组件异步加载：
	// 这是普通的组件加载，应用程序启动后，组件就被加载了
	import Foo from './components/Foot.vue';
	// 这是按需加载，应用执行执行到此页面时， 才会去加载组件
	const Foo = () => import('./components/Foot.vue');

	Vue 2.5以下版本， 服务端渲染时异步组件只能用在路由上。
	2.5+版本， 异步组件可以用在任何地方。

七、 数据预取和状态
	7.1. 基础知识：
		在挂载mount到客户端前，客户端需要获取到， 与服务器端应用完全相同的数据。 不然，二者会因为状态的不同，而导致混合失败。

		获取数据，需要位于视图组件之外，即放置在专门的数据预取存储容器（data store），或状态容器(state container)中。
		在服务端，在渲染前预取数据，将数据填充到store中。
		在HTML中序列化和内联预置状态，这样， 挂载(mount)到客户端应用程序之前，可以直接从store中获取到内联预置状态。
	7.2. 带有逻辑配置的组件：
		在路由组件中，放置数据预取逻辑。

	7.3. 服务器端数据预取(Server Data Fetching)
		在entry-server.js中
		import {createApp} from './app';

		export default context => {
			return new Promise((resolve, reject) => {
				const {app, router, store} = createApp();
				router.push(context.url);

				router.onReady(() => {
					const matchedComponents = router.getMatchedComponents();
					if (!matchedComponents.length) {
						return reject({code: 404});
					}

					// 对所有匹配的路由组件调用 asyncData()
					Promise.all(matchedComponents.map(Component => {
						if (Component.asyncData) {
							return Component.asyncData({
								store,
								route: router.currentRoute
							})
						}
					})).then(() => {
						// 在所有预取钩子(preFetch hook) resolve后
						// 我们的store现在已经填充入渲染应用程序所需的状态
						// 当我们将状态附加到上下文，
						// 并且 template 选项用于 renderer时
						// 状态将自动序列化为window.__INITIAL_STATE__,并注入HTML

						context.state = store.state;

						resolve(app);
					}).catch(reject)
				}, reject)
			})
		}

		当使用template时， context.state将作为window.__INITIAL_STATE__状态，自动嵌入到最终的HTML中。
		在客户端，在挂载到应用程序前，store就应该获取到状态
		在entry-client.js中:
		const {app, router, store} = createApp();

		if (window.__INITIAL_STATE__) {
			store.replaceState(window.__INITIAL_STATE__);
		}

	7.4 客户端数据预取（Client Data Fetching）
		有二种不同方式： 在路由导航之前解析数据， 匹配要渲染的视图后， 再获取数据
		7.4.1. 在路由导航之前解析数据：
			应用程序会等待视图所需数据全部解析后，再传入数据并处理当前视图。
			优点：数据准备就绪时，传入渲染完整内容。
			缺点： 数据过长时， 用户在当前视图会感到“明显卡顿”。

			使用此方法，需提供一个数据加载指示器(data loading indicator)。

			在全局路由钩子函数中执行asyncData函数。在初始路由准备就绪后，应注册此钩子，这样就不必再次获取服务器提取的数据。

			在entry-client.js中：
			...
			router.onReady(() => {
				// 添加路由钩子函数，用于处理asyncData
				// 在初始路由resolve后执行，
				// 以便我们不会二次预取(double-fetch)已有数据。
				// 使用 router.beforeResolve(),以便确保所有异步组件都 resolve。
				router.beforeResolve((to, from, next) => {
					const matched = router.getMatchedComponents(to);
					const prevMatched = router.getMatchedComponents(from);

					// 我们只关心非预渲染的组件
					// 所以我们对比它们， 找出两个匹配列表的差异组件
					let diffed = false;
					const activated = mathced.filter((c,i) => {
						return diffed || (diffed = (prevMatched[i] !== c))
					})

					if (!activated.length) {
						return next();
					}

					// 这里如果有加载指示器(loading indicator), 就触发
					Promise.all(activated.map(c => {
						if (c.asyncData) {
							return c.asyncData({store, route:to})
						}
					})).then(() => {
						// 停止加载指示器
						next();
					}).catch(next)
				})

				app.$mount('#app')
			})
		7.4.2 匹配要渲染的视图后， 再获取数据
			数据的预取逻辑，放在视图组件的beforeMount函数中。
			优点：当路由导航被触发时，立即切换视图，此应用程序有更快的响应速度。
			缺点：传入视图在渲染时，没有完整的可用数据。因此使用此方法的每个视图组件，都 需要具有条件加载状态。

			在client-only.js中
			Vue.mixin({
				beforeMount () {
					const {asyncData} = this.$options;
					if (asyncData) {
						// 将获取数据操作分配给 promise
						// 以便在组件中， 我们可以 在数据准备就绪后
						// 通过运行 this.dataPromise.then()  来执笔地其他任务
						this.dataPromise = asyncData({
							store: this.$store,
							route: this.$route
						})
					}
				}
			})

			当路由组件重用（同一路由，只是params,query更改而已）, 应该调用asyncData函数。
			这种状态，可以通过纯客户端client-only的全局mixin来处理：
			Vue.mixin({
				beforeRouteUpdata(to, from, next) {
					const {asyncData} = this.$options;
					if (asyncData) {
						asyncData({
							store: this.$store,
							route: to
						}).then(next).catch(next)
					} else {
						next();
					}
				}
			})


	
	https://ssr.vuejs.org/zh/guide/structure.html#%E4%BD%BF%E7%94%A8-webpack-%E7%9A%84%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84

8. Store代码拆分 Store Code Splitting
	store/modules/foo.js中

	export default {
		namespaced: true,
		// 重要信息： state必须是一个函数，
		// 因此可以创建多个实例化该 模块
		state: () => ({
			count: 0
		}),
		actions: {
			inc: ({commit}) =>　commit('inc')
		},
		mutations: {
			inc: state => state.count++
		}
	}

	可以在路由组件的asyncData钩子函数中， 使用store.registerModule 惰性注册(lazy-register)这个模块：
		// 在路由组件内
		<template>
			<div>{{fooCount}}</div>
		</template>
		<script>
			// 在这里导入模块， 而不是在'store/index.js'中
			import fooStoreModule from '../store/modules/foo';
			export default {
				asyncData({store}) {
					store.registerModule('foo', footStoreModule);
					return store.dispatch('foo/inc');
				},
				// 重要信息： 当多次访问路由时，
				// 避免在客户端重复注册模块
				destroyed () {
					this.$store.unregisterModule('foo');
				},
				computed: {
					fooCount () {
						return this.$store.state.foo.count
					}
				}
			}
		</script>

9. 客户端激活(client-side hydration)
	客户端激活： 指Vue在浏览器端接管由服务端发送的静态html， 使其变为由Vue管理的动态DOM的过程。
	服务器端输出的静态HTML中， 有如下标识：
		<div id="app" data-server-rendered="true">....